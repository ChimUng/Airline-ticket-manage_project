

export class Seat{
    constructor() {
        document.addEventListener("DOMContentLoaded", ()=>{
            this.init();
        })
    } 
    init() {
        this.Seat_Flight();
        this.selectPassenger();
        this.Load();
        this.setupSeatToggle();
    }
    setupSeatToggle() {
        const btn = document.getElementById('outselectseat');
        const section = document.querySelector('.container-seat');
        
        btn.addEventListener('click', () => {
            const isOpen = section.classList.contains('open');
    
            section.classList.toggle('open');
            btn.innerHTML = isOpen
                ? '<i class="fa-solid fa-chevron-down"></i> Xem th√™m'
                : '<i class="fa-solid fa-chevron-up"></i> Thu g·ªçn';
    
            section.scrollIntoView({ behavior: 'smooth' });
        });
    } 
    async Seat_Flight() {
        const flight = JSON.parse(sessionStorage.getItem("departureFlight")) || [];
        const flightreturn = JSON.parse(sessionStorage.getItem("returnFlight")) || [];
        try {
            if(!flightreturn || flightreturn.length === 0){
                const seat = await this.fetchSeatFlight(flight.flightId);
                //const seatoj = JSON.parse(seat);
                this.renderSeats(seat);
            } else {
                const seat = await this.fetchSeatFlight(flight.flightId);
                this.renderSeats(seat);
                const seatreturn = await this.fetchSeatFlight(flightreturn.flightId);
                this.renderSeats_return(seatreturn);
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu h√†nh l√Ω:", error);
        }
    }
    // G·ª≠i d·ªØ li·ªáu ƒë·∫øn controller
    async fetchSeatFlight(flight_id) {
        try {
            const response = await fetch("/DemoAjax/handle/controller.php?action=search_seat", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ flight_id })
        });
                
            if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                return data;
            } catch (error) {
                console.error("‚ùå L·ªói khi fetch d·ªØ li·ªáu:", error);
            }
    }
    selectPassenger() {
            const passenger = JSON.parse(sessionStorage.getItem("passengers") || "[]");
            const passengers = passenger.passengers
            if (!passengers.length) {
                console.warn("‚ö†Ô∏è Kh√¥ng c√≥ h√†nh kh√°ch n√†o.");
                return;
            }
            this.getPassengerToChange(passengers);
            this.getPassengerToChange_return(passengers);
    }
    // H√†m render ·∫£o (Ch·ªâ render gh·∫ø trong t·∫ßm nh√¨n)
    renderSeats(data) {
        //const container = document.getElementById("seat");
        const totalSeats = data.length;
        const batchSize = 100; // S·ªë l∆∞·ª£ng gh·∫ø render m·ªói l·∫ßn
        let startIndex = 0;
        this.loadMoreSeats(data,totalSeats,batchSize,startIndex);
   }
   // Render h√†ng gh·∫ø
    loadMoreSeats(data, totalSeats, batchSize, startIndex) {
        const container = document.getElementById("seat");
        const endIndex = Math.min(startIndex + batchSize, totalSeats);

        // Nh√≥m gh·∫ø theo h√†ng (seat_row)
        const groupedSeats = {};

        // Ph√¢n chia d·ªØ li·ªáu th√†nh h√†ng d·ª±a tr√™n seat_row
        for (let i = startIndex; i < endIndex; i++) {
            const seat = data[i];
            const row = seat.seat_row; // L·∫•y h√†ng (s·ªë)

            if (!groupedSeats[row]) {
                groupedSeats[row] = [];
            }
            groupedSeats[row].push(seat);
        }

        // Duy·ªát qua t·ª´ng h√†ng
        for (const row in groupedSeats) {
            const rowDiv = document.createElement("div");
            rowDiv.classList.add("row"); // D√πng class "row" ƒë·ªÉ chia h√†ng

            // Duy·ªát t·ª´ng gh·∫ø trong h√†ng
            groupedSeats[row].forEach(seat => {
                const seatDiv = document.createElement("div");
                seatDiv.classList.add("seat");
                seatDiv.textContent = seat.seat_number;
                // G√°n thu·ªôc t√≠nh ƒë·ªÉ d·ªÖ truy xu·∫•t
                seatDiv.setAttribute("data-seat", seat.seat_id);
                seatDiv.setAttribute("data-seat-price", seat.price_seat); 
            // N·∫øu gh·∫ø tr·ªëng
            if (seat.is_booked === 0) {
                seatDiv.classList.add("available");
            } else {
                // Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
                seatDiv.classList.add("unavailable");
            }
                rowDiv.appendChild(seatDiv);
            });

            // Th√™m t·ª´ng h√†ng v√†o container
            container.appendChild(rowDiv);
        }   
        // C·∫≠p nh·∫≠t startIndex cho l·∫ßn ti·∫øp theo
        startIndex = endIndex;
        this.clickseat();
    }
    // H√†m x·ª≠ l√Ω khi click v√†o gh·∫ø
    clickseat() {
        const seatDivs = document.querySelectorAll('.seat'); // L·∫•y t·∫•t c·∫£ gh·∫ø
        if (seatDivs.length === 0) {
            console.warn("‚ö†Ô∏è Kh√¥ng c√≥ gh·∫ø n√†o ƒë·ªÉ ch·ªçn.");
            return;
        }

        // Duy·ªát qua t·ª´ng gh·∫ø v√† g·∫Øn s·ª± ki·ªán click
        seatDivs.forEach(seatDiv => {
            seatDiv.addEventListener("click", (e) => {
                if (!seatDiv.classList.contains("unavailable")) {
                    const seatNumber = e.target.getAttribute("data-seat"); 
                    const price = e.target.getAttribute("data-seat-price");
                    console.log(`‚úÖ ƒê√£ ch·ªçn gh·∫ø: ${seatNumber}`);
                    this.selectSeatForPassenger(seatNumber,price);
                    this.selectPassenger();
                } else {
                    console.warn("‚ö†Ô∏è Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.");
                }
            });
        });
    }
    selectSeatForPassenger(seatNumber, price) {
    // L·∫•y to√†n b·ªô object t·ª´ sessionStorage
    let passengerData = JSON.parse(sessionStorage.getItem("passengers") || "{}");
    let passengers = passengerData.passengers;

    // Ch·ªçn h√†nh kh√°ch mu·ªën ƒë·ªïi gh·∫ø
    const passengerIndex = this.handleSeatChange();
    console.log(`üßç‚Äç‚ôÇÔ∏è V·ªã tr√≠ h√†nh kh√°ch: ${passengerIndex}`);

    // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y h√†nh kh√°ch
    if (passengerIndex === -1 || !passengers[passengerIndex]) {
        console.warn("‚ö†Ô∏è H·ªßy ho·∫∑c kh√¥ng t√¨m th·∫•y h√†nh kh√°ch. D·ª´ng c·∫≠p nh·∫≠t gh·∫ø.");
        return;
    }

    const currentPassenger = passengers[passengerIndex];
    console.log("ü™ë H√†nh kh√°ch hi·ªán t·∫°i:", currentPassenger);

    // N·∫øu gh·∫ø ƒë√£ ƒë∆∞·ª£c ai ƒë√≥ ch·ªçn, kh√¥ng cho ch·ªçn tr√πng
    const isSeatTaken = passengers.some(p => p.seat === seatNumber);
    if (isSeatTaken) {
        console.warn(`‚ö†Ô∏è Gh·∫ø ${seatNumber} ƒë√£ ƒë∆∞·ª£c ch·ªçn. Vui l√≤ng ch·ªçn gh·∫ø kh√°c.`);
        alert(`Gh·∫ø ${seatNumber} ƒë√£ ƒë∆∞·ª£c ch·ªçn. Vui l√≤ng ch·ªçn gh·∫ø kh√°c.`);
        return;
    }

    // N·∫øu ng∆∞·ªùi n√†y ƒë√£ c√≥ gh·∫ø c≈©, b·ªè gh·∫ø c≈© tr∆∞·ªõc
    const oldSeat = currentPassenger.seat;
    if (oldSeat) {
        this.updateoldSeatStatusSelect(oldSeat); // C·∫≠p nh·∫≠t gh·∫ø c≈©
        console.log(`ü™ë B·ªè gh·∫ø c≈©: ${oldSeat}`);
    }

    // C·∫≠p nh·∫≠t gh·∫ø m·ªõi cho h√†nh kh√°ch v√† g·∫Øn gi√° gh·∫ø v√†o
    currentPassenger.seat = seatNumber;
    currentPassenger.seat_price = price;  // L∆∞u gi√° gh·∫ø v√†o h√†nh kh√°ch
    this.updatenewSeatStatusSelect(seatNumber); // C·∫≠p nh·∫≠t gh·∫ø m·ªõi
    console.log(`‚úÖ Gh·∫ø ${seatNumber} (Gi√°: ${price} VND) ƒë√£ ƒë∆∞·ª£c g√°n cho ${currentPassenger.name}`);

    // L∆∞u l·∫°i to√†n b·ªô object v√†o sessionStorage
    sessionStorage.setItem("passengers", JSON.stringify(passengerData));
}
    
    getPassengerToChange(passengers) {
        const container = document.getElementById("selectContainer");
        if (!container) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y #selectContainer_return.");
            return -1;
        }

        // L·∫•y gi√° tr·ªã hi·ªán t·∫°i (n·∫øu ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥)
        const previousSelect = document.getElementById("passengerSelect");
        let selectedValue = previousSelect ? previousSelect.value : "";

        // X√≥a select c≈© n·∫øu c√≥
        container.innerHTML = "";

        // T·∫°o select m·ªõi
        const select = document.createElement("select");
        select.id = "passengerSelect";
        // Th√™m c√°c option h√†nh kh√°ch
        passengers.forEach((p, i) => {
            const seatStatus = p.seat ? `- ${p.seat}` : "- Ch∆∞a ch·ªçn gh·∫ø";
            const isSelected = i.toString() === selectedValue ? "selected" : "";
            select.innerHTML += `<option value="${i}" ${isSelected}>${i + 1}. ${p.name} (${p.gender}) ${seatStatus}</option>`;
        });

        // G·∫Øn select v√†o container
        container.appendChild(select);
    }

    // H√†m x·ª≠ l√Ω khi c·∫ßn ƒë·ªïi gh·∫ø
    handleSeatChange() {
        const select = document.getElementById('passengerSelect');
        if (!select) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y #passengerSelect.");
            return -1;
        }
        return select.value; // Tr·∫£ v·ªÅ index ƒë∆∞·ª£c ch·ªçn
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø khi ch·ªçn v√† ƒë·ªïi m√†u
    updateoldSeatStatusSelect(seatNumber) {
        const seatDiv = document.querySelector(`[data-seat="${seatNumber}"]`);
        if (!seatDiv) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gh·∫ø s·ªë ${seatNumber}`);
            return;
        }
        seatDiv.classList.remove('booked');
        seatDiv.classList.add('available');
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø khi ch·ªçn v√† ƒë·ªïi m√†u
    updatenewSeatStatusSelect(seatNumber) {
        const seatDiv = document.querySelector(`[data-seat="${seatNumber}"]`);
        if (!seatDiv) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gh·∫ø s·ªë ${seatNumber}`);
            return;
        }
        seatDiv.classList.remove('available');
        seatDiv.classList.add('booked');
    }

    renderSeats_return(data) {
        //const container = document.getElementById("seat_return");
        const totalSeats = data.length;
        console.log(totalSeats);
        const batchSize = 100; // S·ªë l∆∞·ª£ng gh·∫ø render m·ªói l·∫ßn
        let startIndex = 0;
        this.loadMoreSeats_return(data,totalSeats,batchSize,startIndex);
   }
   // Render h√†ng gh·∫ø
    loadMoreSeats_return(data, totalSeats, batchSize, startIndex) {
        const container = document.getElementById("seat_return");
        const endIndex = Math.min(startIndex + batchSize, totalSeats);

        // Nh√≥m gh·∫ø theo h√†ng (seat_row)
        const groupedSeats = {};

        // Ph√¢n chia d·ªØ li·ªáu th√†nh h√†ng d·ª±a tr√™n seat_row
        for (let i = startIndex; i < endIndex; i++) {
            const seat = data[i];
            const row = seat.seat_row; // L·∫•y h√†ng (s·ªë)

            if (!groupedSeats[row]) {
                groupedSeats[row] = [];
            }
            groupedSeats[row].push(seat);
        }

        // Duy·ªát qua t·ª´ng h√†ng
        for (const row in groupedSeats) {
            const rowDiv = document.createElement("div");
            rowDiv.classList.add("row"); // D√πng class "row" ƒë·ªÉ chia h√†ng

            // Duy·ªát t·ª´ng gh·∫ø trong h√†ng
            groupedSeats[row].forEach(seat => {
                const seatDiv = document.createElement("div");
                seatDiv.classList.add("seat_return");
                seatDiv.textContent = seat.seat_number;
                // G√°n thu·ªôc t√≠nh ƒë·ªÉ d·ªÖ truy xu·∫•t
                seatDiv.setAttribute("data-seat-return", seat.seat_id);
                seatDiv.setAttribute("data-seat-return-price", seat.price_seat); 

            // N·∫øu gh·∫ø tr·ªëng
            if (seat.is_booked === 0) {
                seatDiv.classList.add("available");
            } else {
                // Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
                seatDiv.classList.add("unavailable");
            }
                rowDiv.appendChild(seatDiv);
            });

            // Th√™m t·ª´ng h√†ng v√†o container
            container.appendChild(rowDiv);
        }   
        // C·∫≠p nh·∫≠t startIndex cho l·∫ßn ti·∫øp theo
        startIndex = endIndex;
    this.clickseat_return();
    }
    // H√†m x·ª≠ l√Ω khi click v√†o gh·∫ø
    clickseat_return() {
        const seatDivs = document.querySelectorAll('.seat_return'); // L·∫•y t·∫•t c·∫£ gh·∫ø
        if (seatDivs.length === 0) {
            console.warn("‚ö†Ô∏è Kh√¥ng c√≥ gh·∫ø n√†o ƒë·ªÉ ch·ªçn.");
            return;
        }

        // Duy·ªát qua t·ª´ng gh·∫ø v√† g·∫Øn s·ª± ki·ªán click
        seatDivs.forEach(seatDiv => {
            seatDiv.addEventListener("click", (e) => {
                if (!seatDiv.classList.contains("unavailable")) {
                    const seatNumber = e.target.getAttribute("data-seat-return"); 
                    const price = e.target.getAttribute("data-seat-return-price"); 
                    console.log(`‚úÖ ƒê√£ ch·ªçn gh·∫ø: ${seatNumber}`);
                    this.selectSeatForPassenger_return(seatNumber,price);
                    this.selectPassenger();
                } else {
                    console.warn("‚ö†Ô∏è Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t.");
                }
            });
        });
    }
    selectSeatForPassenger_return(seatNumber,price) {
        // L·∫•y to√†n b·ªô object t·ª´ sessionStorage
        let passengerData = JSON.parse(sessionStorage.getItem("passengers") || "{}");
        let passengers = passengerData.passengers;
    
        // Ch·ªçn h√†nh kh√°ch mu·ªën ƒë·ªïi gh·∫ø
        const passengerIndex = this.handleSeatChange_return();
        console.log(`üßç‚Äç‚ôÇÔ∏è V·ªã tr√≠ h√†nh kh√°ch: ${passengerIndex}`);
    
        // N·∫øu h·ªßy ho·∫∑c kh√¥ng t√¨m th·∫•y h√†nh kh√°ch, d·ª´ng h√†m ngay l·∫≠p t·ª©c
        if (passengerIndex === -1) {
            console.warn("‚ö†Ô∏è H·ªßy ho·∫∑c kh√¥ng t√¨m th·∫•y h√†nh kh√°ch. D·ª´ng c·∫≠p nh·∫≠t gh·∫ø.");
            return;
        }
    
        const currentPassenger = passengers[passengerIndex];
        console.log("ü™ë H√†nh kh√°ch hi·ªán t·∫°i:", currentPassenger);
    
        // N·∫øu gh·∫ø ƒë√£ ƒë∆∞·ª£c ai ƒë√≥ ch·ªçn, kh√¥ng cho ch·ªçn tr√πng
        const isSeatTaken = passengers.some(p => p.seat_return === seatNumber);
        if (isSeatTaken) {
            console.warn(`‚ö†Ô∏è Gh·∫ø ${seatNumber} ƒë√£ ƒë∆∞·ª£c ch·ªçn. Vui l√≤ng ch·ªçn gh·∫ø kh√°c.`);
            return;
        }
    
        // N·∫øu ng∆∞·ªùi n√†y ƒë√£ c√≥ gh·∫ø c≈©, b·ªè gh·∫ø c≈© tr∆∞·ªõc
        const oldSeat = currentPassenger.seat_return;
        if (oldSeat) {
            this.updateoldSeatStatusSelect_return(oldSeat);
            console.log(`ü™ë B·ªè gh·∫ø c≈©: ${oldSeat}`);
        }
    
        // C·∫≠p nh·∫≠t gh·∫ø m·ªõi cho h√†nh kh√°ch
        currentPassenger.seat_return = seatNumber;
        currentPassenger.seat_return_price = price;  // L∆∞u gi√° gh·∫ø v√†o h√†nh kh√°ch
        this.updatenewSeatStatusSelect_return(seatNumber);
        console.log(`‚úÖ Gh·∫ø ${seatNumber} ƒë√£ ƒë∆∞·ª£c g√°n cho ${currentPassenger.name}`);
    
        // L∆∞u l·∫°i to√†n b·ªô object v√†o sessionStorage
        sessionStorage.setItem("passengers", JSON.stringify(passengerData));
    }
    getPassengerToChange_return(passengers) {
        const container = document.getElementById("selectContainer_return");
        if (!container) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y #selectContainer_return.");
            return -1;
        }

        // L·∫•y gi√° tr·ªã hi·ªán t·∫°i (n·∫øu ƒë√£ ch·ªçn tr∆∞·ªõc ƒë√≥)
        const previousSelect = document.getElementById("passengerSelect_return");
        let selectedValue = previousSelect ? previousSelect.value : "";

        // X√≥a select c≈© n·∫øu c√≥
        container.innerHTML = "";

        // T·∫°o select m·ªõi
        const select = document.createElement("select");
        select.id = "passengerSelect_return";
        // Th√™m c√°c option h√†nh kh√°ch
        passengers.forEach((p, i) => {
            const seatStatus = p.seat_return ? `- ${p.seat_return}` : "- Ch∆∞a ch·ªçn gh·∫ø";
            const isSelected = i.toString() === selectedValue ? "selected" : "";
            select.innerHTML += `<option value="${i}" ${isSelected}>${i + 1}. ${p.name} (${p.gender}) ${seatStatus}</option>`;
        });

        // G·∫Øn select v√†o container
        container.appendChild(select);
    }

    // H√†m x·ª≠ l√Ω khi c·∫ßn ƒë·ªïi gh·∫ø
    handleSeatChange_return() {
        const select = document.getElementById('passengerSelect_return');
        if (!select) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y #passengerSelect_return.");
            return -1;
        }
        return select.value; // Tr·∫£ v·ªÅ index ƒë∆∞·ª£c ch·ªçn
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø khi ch·ªçn v√† ƒë·ªïi m√†u
    updateoldSeatStatusSelect_return(seatNumber) {
        const seatDiv = document.querySelector(`[data-seat-return="${seatNumber}"]`);
        if (!seatDiv) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gh·∫ø s·ªë ${seatNumber}`);
            return;
        }
        seatDiv.classList.remove('booked');
        seatDiv.classList.add('available');
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø khi ch·ªçn v√† ƒë·ªïi m√†u
    updatenewSeatStatusSelect_return(seatNumber) {
        const seatDiv = document.querySelector(`[data-seat-return="${seatNumber}"]`);
        if (!seatDiv) {
            console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gh·∫ø s·ªë ${seatNumber}`);
            return;
        }
        seatDiv.classList.remove('available');
        seatDiv.classList.add('booked');
    }
    // Load l·∫°i trang
    Load(){
        window.addEventListener("load", () => {
            const passenger = JSON.parse(sessionStorage.getItem("passengers") || "[]");
            const passengers = passenger.passengers
            this.getPassengerToChange(passengers);
            this.getPassengerToChange_return(passengers);
            setTimeout(() => {
                passengers.forEach(passenger1 => {
                    if (passenger1.seat) {
                        this.updatenewSeatStatusSelect(passenger1.seat);
                    }
                    if (passenger1.seat_return) {
                        this.updatenewSeatStatusSelect_return(passenger1.seat_return);
                    }
                });
            }, 100);
        });  
    }
}
new Seat();